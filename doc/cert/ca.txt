================生成ca证书

您提到的确实是一个重要的问题。在实际创建CA证书时，确保添加适当的扩展是非常重要的，特别是在签署其他证书时。
以下是一个包含适当扩展的示例，您可以使用openssl.cnf文件来定义这些扩展。以下是一个简单的openssl.cnf文件示例：

    [req]
    distinguished_name = req_distinguished_name
    x509_extensions = v3_ca

    [req_distinguished_name]
    countryName = Country Name (2 letter code)
    countryName_default = US
    stateOrProvinceName = State or Province Name (full name)
    stateOrProvinceName_default = California
    localityName = Locality Name (eg, city)
    localityName_default = San Francisco
    organizationName = Organization Name (eg, company)
    organizationName_default = My Company
    commonName = Common Name (e.g. server FQDN or YOUR name)
    commonName_default = example.com
    emailAddress = Email Address
    emailAddress_default = admin@example.com

    [v3_ca]
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid:always,issuer
    basicConstraints = critical, CA:true
    keyUsage = critical, digitalSignature, keyCertSign, cRLSign

在生成CA证书时，您可以使用openssl.cnf文件来指定相关配置，例如：

    openssl req -new -newkey rsa:2048 -nodes -keyout ca.key -out ca.csr -config openssl.cnf
    openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -extfile openssl.cnf -extensions v3_ca -days 365

注意,还会提示输入必要信息,但是可以直接输入空,一路回车,就会用默认值

=========================== 生成证书

首先，您需要创建一个包含证书信息的 openssl2.cnf 文件，内容如下：

    [req]
    distinguished_name = req_distinguished_name
    req_extensions = v3_req
    prompt = no

    [req_distinguished_name]
    countryName = XX
    stateOrProvinceName = State
    localityName = Locality
    organizationName = Organization
    commonName = node1.pc

    [v3_req]
    subjectAltName = @alt_names

    [alt_names]
    DNS.1 = github.com
    DNS.2 = www.baidu.com  
	DNS.3 = www.gitee.com  

然后，使用以下命令生成证书和密钥文件：

    openssl req -new -nodes -out server.csr -keyout server.key.pem -config openssl2.cnf
    openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt.pem -days 365 -extfile openssl2.cnf -extensions v3_req