xmake 
    xmake c -va
    xmake f -m debug --toolchain=clang -c
    xmake -vDwr 

curl测试
    curl -x http://localhost:55555 -vk 'https://www.baidu.com' 

证书生成
    https://github.com/chronoxor/CppServer#openssl-certificates
    https://learn.microsoft.com/en-us/azure/application-gateway/self-signed-certificates
    https://www.baeldung.com/openssl-self-signed-cert
certificate 
    https://www.rfc-editor.org/rfc/rfc5246#appendix-B

pkey 密钥
    它的持有者可以由它创建认证签名请求,然后向ca中心进行认证

x509 csr 认证签名请求
    请求认证中心给一个认证.请求中包含请求者的信息以及它的公钥

x509 签名
    证书认证中心用自己的私钥签名csr请求,生成crt证书

crt
    获得的证书,当客户端发起tls通讯时,服务端把这个证书发送给他们

ca certificate
    证书颁发机构(ca)的证书.一般浏览器内置很多信任的ca的证书.当服务器发送自己的证书时,浏览器会使用那些ca的证书来验证
    服务器的证书.

    创建完ca的证书后,通常有签名请求,就通过openssl req 命令中的 -CA 和 -CAkey参数指定这个CA的证书以及CA的证书对应私钥
    来给证书请求进行签名

    创建证书请求时,自己签名自己就创建了自签名证书
    要想成为ca,则需要一些必要的其他属性和扩展
    //https://www.rfc-editor.org/rfc/rfc5280

https://learn.microsoft.com/zh-cn/azure/iot-hub/reference-x509-certificates

查看参数
openssl req -h

openssl genpkey -out pop.key -algorithm RSA -pkeyopt rsa_keygen_bits:2048
openssl req -new -key pop.key -out pop.csr

openssl req -x509 与 openssl x509 命令
输出的x509默认证书格式都是pem
    https://www.openssl.org/docs/manmaster/man1/openssl-x509.html

生成自签名的ca证书
    openssl req -new -x509 -keyout ca-key.pem -out ca-cert.pem -days 365 -extensions v3_ca -subj "/C=US/ST=California/L=San Francisco/O=MyOrganization/CN=MyCA" -nodes -addext "keyUsage=critical,keyCertSign,cRLSign"
    
    /C=US：国家代码（Country）
    /ST=California：州或省名（State）
    /L=San Francisco：城市名（Locality）
    /O=MyOrganization：组织名（Organization）
    /CN=MyCA：通用名称（Common Name）

快捷键
https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-shortcuts-reference

vscode 
    Fold (Ctrl+Shift+[) folds the innermost uncollapsed region at the cursor.
    Unfold (Ctrl+Shift+]) unfolds the collapsed region at the cursor.
    Toggle Fold (Ctrl+K Ctrl+L) folds or unfolds the region at the cursor.
    Fold Recursively (Ctrl+K Ctrl+[) folds the innermost uncollapsed region at the cursor and all regions inside that region.
    Unfold Recursively (Ctrl+K Ctrl+]) unfolds the region at the cursor and all regions inside that region.
    Fold All (Ctrl+K Ctrl+0) folds all regions in the editor.
    Unfold All (Ctrl+K Ctrl+J) unfolds all regions in the editor.
    Fold Level X (Ctrl+K Ctrl+2 for level 2) folds all regions of level X, except the region at the current cursor position.
    Fold All Block Comments (Ctrl+K Ctrl+/) folds all regions that start with a block comment token.

    Ctrl+Shift+K 删除一行
    Ctrl+L 选择当前行
    Shift+Alt+Right     扩大选择块
    Shift+Alt+Left      减小选择块
    Ctrl+,          打开设置面板
    
常用操作
    定位当前打开的文件在左侧的位置      右键打开的文件编辑器的tab页,点击 reveal in explorer view
    多行显示已打开的tab     去设置中搜索 wraptab
    
如果某个消息头field是多值消息,那么代理不能修改这些值的顺序
https://www.rfc-editor.org/rfc/rfc2616#section-4.2


协程内,协程切换时,一定不能持有锁!!
    如何解决? 获取锁的协程,在暂停执行时,它所在的线程不允许再执行其他的协程.
        协程执行器一定得知道协程持有哪些锁,这要求应用程序需要告诉执行器它获得的锁

复杂声明

template <typename>
char (&async_result_initiate_memfn_helper(...))[2];

template <typename T>
char async_result_initiate_memfn_helper(
    async_result_memfns_check<
      void (async_result_memfns_base::*)(),
      &async_result_memfns_derived<T>::initiate>*);

第一个声明的是一个函数模板,它生成的函数是:接受不定参数,且返回数组引用,其中数组是char [2]类型
主要问题是引用是修饰的是数组,而非括号内的async_result_initiate_memfn_helper名字

    文心一言 https://zh.cppreference.com/w/cpp/language/declarations

tls1.2 sni
    https://www.rfc-editor.org/rfc/rfc6066#section-3